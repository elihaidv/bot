name: Deploy to Production

on:
  push:
    branches:
      - master
      - firebase

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Compile TypeScript
        run: npx tsc --skipLibCheck --resolveJsonModule --esModuleInterop --module ESNext --moduleResolution node --outDir build -t es2020 Simulator/rabbitConsumer.ts
        continue-on-error: true
        
      - name: Setup SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_BASE64 }}" | base64 -d > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          eval $(ssh-agent -s)
          ssh-add /tmp/ssh_key
          
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'; pwd; whoami"
          
      - name: Create deploy directory
        run: |
          echo "Creating deploy directory: ${{ secrets.DEPLOY_PATH }}"
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"
          
      - name: Deploy to server
        run: |
          echo "Deploying to ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}"
          rsync -avz --progress --exclude='.git' --exclude='node_modules' --exclude='.github' --exclude='*.log' ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}
          
      - name: Install dependencies on server
        run: |
          echo "Installing dependencies on server"
          ssh -o ConnectTimeout=10 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && npm install --production"
          
      - name: Check PM2 status and reload
        run: |
          echo "Checking PM2 and reloading rabbitConsumer"
          ssh -o ConnectTimeout=10 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && (npx pm2 list || echo 'PM2 not running') && (npx pm2 reload rabbitConsumer || npx pm2 start Simulator/rabbitConsumer.js --name rabbitConsumer)"
          
      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/ssh_key