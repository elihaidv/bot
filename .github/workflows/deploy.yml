name: Deploy to Production

on:
  push:
    branches:
      - master
      - firebase

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Compile TypeScript
        run: npx tsc --skipLibCheck --resolveJsonModule --esModuleInterop --module ESNext --moduleResolution node --outDir build -t es2020 Simulator/rabbitConsumer.ts
        continue-on-error: true
        
      - name: Validate deployment secrets
        run: |
          echo "🔍 Validating deployment configuration..."
          echo "============================================"
          
          all_secrets_present=true
          
          if [ -z "$SSH_PRIVATE_KEY_BASE64" ]; then
            echo "❌ SSH_PRIVATE_KEY_BASE64 is missing"
            all_secrets_present=false
          else
            echo "✅ SSH_PRIVATE_KEY_BASE64 is configured"
          fi
          
          if [ -z "$DEPLOY_HOST" ]; then
            echo "❌ DEPLOY_HOST is missing"
            all_secrets_present=false
          else
            echo "✅ DEPLOY_HOST is configured: $DEPLOY_HOST"
          fi
          
          if [ -z "$DEPLOY_USER" ]; then
            echo "❌ DEPLOY_USER is missing"
            all_secrets_present=false
          else
            echo "✅ DEPLOY_USER is configured: $DEPLOY_USER"
          fi
          
          if [ -z "$DEPLOY_PATH" ]; then
            echo "❌ DEPLOY_PATH is missing"
            all_secrets_present=false
          else
            echo "✅ DEPLOY_PATH is configured: $DEPLOY_PATH"
          fi
          
          echo "============================================"
          
          if [ "$all_secrets_present" = false ]; then
            echo ""
            echo "🚨 DEPLOYMENT FAILED: Missing required secrets!"
            echo ""
            echo "Please configure ALL the following secrets:"
            echo "Go to: https://github.com/elihaidv/bot/settings/secrets/actions"
            echo ""
            echo "Required secrets:"
            echo "  1. SSH_PRIVATE_KEY_BASE64 (your SSH private key, base64 encoded)"
            echo "  2. DEPLOY_HOST (your server hostname or IP address)" 
            echo "  3. DEPLOY_USER (your SSH username for the server)"
            echo "  4. DEPLOY_PATH (full path on server for deployment)"
            echo ""
            echo "Example values:"
            echo "  DEPLOY_HOST: 192.168.1.100 or myserver.com"
            echo "  DEPLOY_USER: root or ubuntu or your-username"
            echo "  DEPLOY_PATH: /home/user/bot or /root/bot"
            echo ""
            echo "To encode your SSH key: cat ~/.ssh/id_rsa | base64 -w 0"
            echo ""
            exit 1
          fi
          
          echo "🎉 All deployment secrets are configured!"
        env:
          SSH_PRIVATE_KEY_BASE64: ${{ secrets.SSH_PRIVATE_KEY_BASE64 }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        
      - name: Setup SSH
        run: |
          echo "🔐 Setting up SSH authentication..."
          echo "${{ secrets.SSH_PRIVATE_KEY_BASE64 }}" | base64 -d > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          eval $(ssh-agent -s)
          ssh-add /tmp/ssh_key
          echo "✅ SSH key loaded successfully"
          
      - name: Add known hosts
        run: |
          echo "🔒 Adding server to known hosts..."
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          echo "✅ Known hosts updated"
          
      - name: Test SSH connection
        run: |
          echo "🔌 Testing SSH connection to ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo '✅ SSH connection successful'; echo 'Server info:'; uname -a; echo 'Current directory:'; pwd; echo 'User:'; whoami; echo 'Disk space:'; df -h | head -3"
          
      - name: Create deploy directory
        run: |
          echo "📁 Creating deployment directory: ${{ secrets.DEPLOY_PATH }}"
          ssh -o ConnectTimeout=30 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }} && echo '✅ Deploy directory created/verified: ${{ secrets.DEPLOY_PATH }}'"
          
      - name: Deploy files to server
        run: |
          echo "🚀 Deploying files to ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}"
          rsync -avz --progress --stats \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            --exclude='*.log' \
            --exclude='.env*' \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}
          echo "✅ Files deployed successfully"
          
      - name: Install dependencies on server
        run: |
          echo "📦 Installing dependencies on server..."
          ssh -o ConnectTimeout=30 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && npm install --production --silent && echo '✅ Dependencies installed successfully'"
          
      - name: Manage PM2 process
        run: |
          echo "⚙️ Managing PM2 process for rabbitConsumer..."
          ssh -o ConnectTimeout=30 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            echo 'Current PM2 status:'
            npx pm2 list || echo 'PM2 not yet running'
            echo 'Managing rabbitConsumer process...'
            if npx pm2 reload rabbitConsumer 2>/dev/null; then
              echo '✅ Successfully reloaded existing rabbitConsumer process'
            else
              echo 'Starting new rabbitConsumer process...'
              npx pm2 start Simulator/rabbitConsumer.js --name rabbitConsumer
              echo '✅ Successfully started new rabbitConsumer process'
            fi
            echo 'Final PM2 status:'
            npx pm2 list
            npx pm2 save
          "
          
      - name: Verify deployment
        run: |
          echo "✅ Verifying deployment..."
          ssh -o ConnectTimeout=30 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            echo 'Deployment verification:'
            echo '📁 Directory contents:'
            ls -la | head -10
            echo '📦 Package.json exists:'
            test -f package.json && echo '✅ package.json found' || echo '❌ package.json missing'
            echo '🔧 Node modules:'
            test -d node_modules && echo '✅ node_modules installed' || echo '❌ node_modules missing'
            echo '⚙️ PM2 process status:'
            npx pm2 show rabbitConsumer || echo 'Process not found'
          "
          
      - name: Deployment success
        run: |
          echo ""
          echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "============================================"
          echo "✅ Code deployed to: ${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}"
          echo "✅ Dependencies installed"
          echo "✅ PM2 process running: rabbitConsumer"
          echo "✅ Server ready for production"
          echo ""
          echo "🔗 Server: ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"
          echo "📁 Path: ${{ secrets.DEPLOY_PATH }}"
          echo ""
          
      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/ssh_key
          echo "🧹 Cleanup completed"